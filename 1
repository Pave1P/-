def encode_hamming(data):
    # Calculate the number of parity bits needed
    n = len(data)
    for i in range(n):
        if 2**i >= n + i + 1:
            break
    # Create the encoded data with parity bits
    encoded = ['0'] * (n + i)
    j = 0
    for k in range(1, n + i + 1):
        if k & (k - 1) == 0:  # Check if k is a power of 2
            continue
        encoded[k-1] = data[j]
        j += 1
    # Calculate parity bits
    for p in range(i):
        pos = 2**p
        parity = 0
        for k in range(1, len(encoded) + 1):
            if k & pos:
                parity ^= int(encoded[k-1])
        encoded[pos-1] = str(parity)
    return ''.join(encoded)

def decode_hamming(encoded):
    n = len(encoded)
    # Calculate the number of parity bits
    for i in range(n):
        if 2**i >= n + 1:
            break
    # Check parity bits
    error_pos = 0
    for p in range(i):
        pos = 2**p
        parity = 0
        for k in range(1, n + 1):
            if k & pos:
                parity ^= int(encoded[k-1])
        if parity != 0:
            error_pos += pos
    # Correct the error
    if error_pos:
        encoded = list(encoded)
        encoded[error_pos-1] = '1' if encoded[error_pos-1] == '0' else '0'
        encoded = ''.join(encoded)
    # Remove parity bits
    decoded = []
    for k in range(1, n + 1):
        if k & (k - 1) != 0:
            decoded.append(encoded[k-1])
    return ''.join(decoded)

# Example usage
data = "computer"
binary_data = ''.join(format(ord(c), '08b') for c in data)
encoded_data = encode_hamming(binary_data)
# Simulate errors
encoded_data = list(encoded_data)
encoded_data[2] = '1' if encoded_data[2] == '0' else '0'
encoded_data[24] = '1' if encoded_data[24] == '0' else '0'
encoded_data = ''.join(encoded_data)
decoded_data = decode_hamming(encoded_data)
print("Decoded data:", decoded_data)
